export interface Stat {
  name: string;
  value: string;
}

export interface Identity {
  name: string;
  profession: string;
  location: string;
  stats: Stat[];
  ascii: string;
}

const PROFESSIONS = [
  'Time Architect',
  'Void Curator',
  'Dream Debugger',
  'Reality Hacker',
  'Chaos Coordinator',
  'Existential IT Support',
  'Quantum Barista',
  'Digital Shaman',
  'Meme Archaeologist',
  'Glitch Whisperer',
  'Pixel Philosopher',
  'Byte Therapist',
  'Code Poet',
  'Data Mystic',
  'Algorithm Alchemist',
  'Binary Bard',
  'Virtual Vibe Curator',
  'Neon Nomad',
  'Cyber Sommelier',
  'Matrix Mathematician',
  'Hologram Historian',
  'Synthetic Storyteller',
  'Digital Daydreamer',
  'Quantum Questioner',
  'Ethereal Engineer'
];

const LOCATIONS = [
  'Neon Swamp #404',
  'The Glitched Dimension',
  'Cyberspace Café',
  'Virtual Void Valley',
  'Pixel Paradise',
  'The Broken Internet',
  'Quantum Coffee Shop',
  'Digital Purgatory',
  'Synthetic Suburbs',
  'The Error Zone',
  'Holographic Highway',
  'Binary Beach',
  'The Lagging Landscape',
  'Corrupted City',
  'The Infinite Loading Screen',
  'Retro-Future Ruins',
  'The Buffering Backrooms',
  'Static Station',
  'The Analog Afterlife',
  'Vaporwave Valley',
  'The Disconnected District',
  'Chromatic Chaos',
  'The Unstable Universe',
  'Glitch Garden',
  'The Rendering Realm'
];

const STAT_NAMES = [
  'Sarcasm Level',
  'WiFi Signal',
  'Existential Dread',
  'Caffeine Dependency',
  'Meme Knowledge',
  'Reality Stability',
  'Procrastination Score',
  'Digital Fatigue',
  'Vibe Check',
  'Chaos Tolerance',
  'Attention Span',
  'Battery Life',
  'Social Media Addiction',
  'Overthinking Capacity',
  'Conspiracy Theories Believed',
  'Midnight Thoughts',
  'Sunday Scaries',
  'Main Character Energy',
  'Plot Armor',
  'NPC Awareness'
];

const STAT_VALUES = [
  '87%', '42%', '99%', '13%', '∞%', '404%', '69%', 'NULL', 'ERROR',
  'Chaotic', 'Stable', 'Corrupted', 'Loading...', 'Undefined',
  'Maximum', 'Minimum', 'Overflow', 'Critical', 'Optimal',
  'Questionable', 'Suspicious', 'Legendary', 'Mythical', 'Cursed',
  'Blessed', 'Glitched', 'Patched', 'Beta', 'Alpha', 'Omega'
];

const NAMES = [
  'Anonymous User',
  'Digital Phantom',
  'Glitch Entity',
  'Cyber Wanderer',
  'Virtual Being',
  'Quantum Self',
  'Binary Soul',
  'Pixel Person',
  'Code Creature',
  'Data Ghost',
  'Algorithm Avatar',
  'Synthetic Specimen',
  'Holographic Human',
  'Neon Nobody',
  'Static Spirit',
  'Error Entity',
  'Void Visitor',
  'Matrix Manifestation',
  'Digital Doppelganger',
  'Cyber Consciousness'
];

function randomChoice<T>(array: T[]): T {
  return array[Math.floor(Math.random() * array.length)];
}

function generateStats(): Stat[] {
  const numStats = 3 + Math.floor(Math.random() * 3); // 3-5 stats
  const selectedNames = [];
  const stats = [];
  
  for (let i = 0; i < numStats; i++) {
    let statName;
    do {
      statName = randomChoice(STAT_NAMES);
    } while (selectedNames.includes(statName));
    
    selectedNames.push(statName);
    stats.push({
      name: statName,
      value: randomChoice(STAT_VALUES)
    });
  }
  
  return stats;
}

function generateAsciiCard(identity: Identity): string {
  const maxWidth = 40;
  const border = '═'.repeat(maxWidth);
  const sideBorder = '║';
  
  const centerText = (text: string) => {
    const padding = Math.max(0, maxWidth - text.length - 2);
    const leftPad = Math.floor(padding / 2);
    const rightPad = padding - leftPad;
    return `${sideBorder}${' '.repeat(leftPad)}${text}${' '.repeat(rightPad)}${sideBorder}`;
  };
  
  const lines = [
    `╔${border}╗`,
    centerText('╭─────────────────────────────────────╮'),
    centerText('│         IDENTITY MATRIX v0.1        │'),
    centerText('╰─────────────────────────────────────╯'),
    centerText(''),
    centerText(`NAME: ${identity.name}`),
    centerText(''),
    centerText(`JOB: ${identity.profession}`),
    centerText(''),
    centerText(`LOC: ${identity.location}`),
    centerText(''),
    centerText('┌─ STATS ─────────────────────────────┐'),
    ...identity.stats.map(stat => 
      centerText(`│ ${stat.name}: ${stat.value}`)
    ),
    centerText('└─────────────────────────────────────┘'),
    centerText(''),
    centerText('⚡ GENERATED BY MEGENERATOR v0.1 ⚡'),
    `╚${border}╝`
  ];
  
  return lines.join('\n');
}

export function generateIdentity(): Identity {
  const identity: Identity = {
    name: randomChoice(NAMES),
    profession: randomChoice(PROFESSIONS),
    location: randomChoice(LOCATIONS),
    stats: generateStats(),
    ascii: ''
  };
  
  identity.ascii = generateAsciiCard(identity);
  
  return identity;
}