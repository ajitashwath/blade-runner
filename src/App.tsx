import React, { useState, useEffect } from 'react';
import { Shuffle, Copy, Zap, Monitor, Cpu, Wifi } from 'lucide-react';
import { Identity, generateIdentity } from './generator';
import { IdCard } from './components/IdCard';
import { GlitchText } from './components/GlitchText';
import { AnimatedBackground } from './components/AnimatedBackground';

function App() {
  const [identity, setIdentity] = useState<Identity | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [copied, setCopied] = useState(false);

  const handleGenerate = async () => {
    setIsGenerating(true);
    // Add a slight delay for dramatic effect
    setTimeout(() => {
      setIdentity(generateIdentity());
      setIsGenerating(false);
    }, 800);
  };

  const handleCopy = async () => {
    if (!identity) return;
    
    const text = `
${identity.name}
Profession: ${identity.profession}
Location: ${identity.location}
${identity.stats.map(stat => `${stat.name}: ${stat.value}`).join('\n')}

Generated by MeGenerator v0.1
    `.trim();
    
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  useEffect(() => {
    // Generate initial identity
    handleGenerate();
  }, []);

  return (
    <div className="min-h-screen bg-black text-white overflow-hidden relative">
      <AnimatedBackground />
      
      {/* Scan lines effect */}
      <div className="fixed inset-0 pointer-events-none opacity-5">
        <div className="scan-lines"></div>
      </div>

      <div className="relative z-10 min-h-screen flex flex-col items-center justify-center p-4">
        {/* Header */}
        <div className="text-center mb-8 max-w-2xl">
          <div className="flex items-center justify-center mb-4">
            <Monitor className="w-8 h-8 mr-3 text-cyan-400" />
            <GlitchText 
              text="MeGenerator v0.1" 
              className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-purple-400 via-pink-500 to-cyan-400 bg-clip-text text-transparent"
            />
          </div>
          <p className="text-gray-300 text-lg md:text-xl font-mono">
            Your Absurdist Identity Machine
          </p>
          <p className="text-gray-500 text-sm mt-2 font-mono">
            Click one button â†’ Generates a surreal digital identity for you
          </p>
        </div>

        {/* Generator Button */}
        <div className="mb-8">
          <button
            onClick={handleGenerate}
            disabled={isGenerating}
            className={`
              group relative px-8 py-4 bg-gradient-to-r from-purple-600 to-pink-600 
              hover:from-purple-500 hover:to-pink-500 rounded-lg font-bold text-lg
              transition-all duration-300 transform hover:scale-105 hover:shadow-2xl
              hover:shadow-purple-500/25 disabled:opacity-50 disabled:cursor-not-allowed
              border border-purple-400/30 font-mono
              ${isGenerating ? 'animate-pulse' : ''}
            `}
          >
            <div className="flex items-center space-x-2">
              {isGenerating ? (
                <Cpu className="w-5 h-5 animate-spin" />
              ) : (
                <Shuffle className="w-5 h-5 group-hover:rotate-180 transition-transform duration-300" />
              )}
              <span>
                {isGenerating ? 'GENERATING...' : 'GENERATE IDENTITY'}
              </span>
              <Zap className="w-5 h-5 group-hover:text-yellow-400 transition-colors" />
            </div>
          </button>
        </div>

        {/* Identity Display */}
        {identity && (
          <div className="w-full max-w-4xl animate-fade-in">
            <IdCard identity={identity} />
            
            {/* Copy Button */}
            <div className="text-center mt-6">
              <button
                onClick={handleCopy}
                className={`
                  group px-6 py-2 bg-gray-800 hover:bg-gray-700 rounded-lg
                  border border-gray-600 transition-all duration-200
                  hover:border-cyan-400 font-mono text-sm
                  ${copied ? 'bg-green-800 border-green-400' : ''}
                `}
              >
                <div className="flex items-center space-x-2">
                  <Copy className="w-4 h-4" />
                  <span>{copied ? 'COPIED!' : 'COPY IDENTITY'}</span>
                </div>
              </button>
            </div>
          </div>
        )}

        {/* Footer */}
        <div className="mt-12 text-center text-gray-500 font-mono text-xs">
          <p className="flex items-center justify-center space-x-2">
            <Wifi className="w-4 h-4" />
            <span>Vibe: Webcore + vaporwave + existential humor</span>
          </p>
        </div>
      </div>
    </div>
  );
}

export default App;